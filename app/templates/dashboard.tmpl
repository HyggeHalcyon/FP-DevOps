<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>{{ .title }}</title>
  <style>
    body {
      font-family: Poppins, sans-serif;
      max-width: 800px;
      margin: 20px auto;
      padding: 20px;
      background-color: #01153E;
    }
    .header {
      display: flex;
      flex-direction: column;
      align-items: center;
      background: white;
      padding: 1rem;
      border-radius: 10px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      margin-bottom: 20px;
    }
    .user-info {
      text-align: center;
      margin-bottom: 10px;
    }
    .logout-btn {
      background-color: #dc3545;
      color: white;
      border: none;
      padding: 8px 16px;
      border-radius: 4px;
      cursor: pointer;
      text-decoration: none;
      display: inline-block;
      font-size: 14px;
      font-weight: normal;
      line-height: 1.5;
      min-width: 70px;
      text-align: center;
      box-sizing: border-box;
    }
    .logout-btn:hover {
      background-color: #c82333;
    }
    .home-btn {
      background-color: #6c757d;
      color: white;
      border: none;
      padding: 8px 16px;
      border-radius: 4px;
      cursor: pointer;
      text-decoration: none;
      display: inline-block;
      margin-right: 10px;
      font-size: 14px;
      font-weight: normal;
      line-height: 1.5;
      min-width: 70px;
      text-align: center;
      box-sizing: border-box;
    }
    .home-btn:hover {
      background-color: #5a6268;
    }
    .dashboard-content {
      background: white;
      align-items: center;
      flex: 1;
      display: flex;
      flex-direction: column;
      padding: 30px;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    h1 {
      color: #333;
      margin-bottom: 10px;
    }
    h2 {
      color: #666;
      font-size: 16px;
      margin-bottom: 30px;
    }
    .loading {
      text-align: center;
      color: #666;
    }
    .error {
      color: #dc3545;
      text-align: center;
      padding: 20px;
    }    
    .files-section {
      margin: 0 auto;
    }
    .files-section h3 {
      color: #333;
      border-bottom: 2px solid #007bff;
      padding-bottom: 10px;
    }
    .file-upload {
      margin: 20px 0;
      padding: 20px;
      border: 2px dashed #ddd;
      border-radius: 8px;
      text-align: center;
    }
    .file-upload input[type="file"] {
      margin: 10px 0;
    }
    .file-upload button {
      background-color: #007bff;
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 4px;
      cursor: pointer;
    }    .file-upload button:hover {
      background-color: #0056b3;
    }
    .upload-btn {
      background-color: #007bff;
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 4px;
      cursor: pointer;
    }
    .upload-btn:hover {
      background-color: #0056b3;
    }
    .files-list {
      margin-top: 20px;
    }
    .file-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 15px;
      border: 1px solid #ddd;
      margin-bottom: 10px;
      border-radius: 4px;
      background-color: #f8f9fa;
    }
    .file-info {
      flex-grow: 1;
    }
    .file-actions {
      display: flex;
      gap: 10px;
    }
    .file-actions button {
      padding: 5px 10px;
      border: none;
      border-radius: 3px;
      cursor: pointer;
      font-size: 12px;
    }
    .download-btn {
      background-color: #28a745;
      color: white;
    }    .delete-btn {
      background-color: #dc3545;
      color: white;
    }    .rename-btn {
      background-color: orange;
      color: white;
    }
    .share-btn {
      background-color: #17a2b8;
      color: white;
    }
    .copy-link-btn {
      background-color: #6f42c1;
      color: white;
    }
    .private-btn {
      background-color: #6c757d;
      color: white;
    }
    .sharing-status {
      font-size: 11px;
      padding: 2px 6px;
      border-radius: 3px;
      margin-left: 5px;
    }
    .status-public {
      background-color: #d4edda;
      color: #155724;
      border: 1px solid #c3e6cb;
    }
    .status-private {
      background-color: #f8d7da;
      color: #721c24;
      border: 1px solid #f5c6cb;
    }
    .pagination {
      text-align: center;
      margin-top: 20px;
    }
    .pagination button {
      margin: 0 5px;
      padding: 8px 12px;
      border: 1px solid #ddd;
      background: white;
      cursor: pointer;
    }
    .pagination button.active {
      background-color: #007bff;
      color: white;
    }
    
    /* Modal styles */
    .modal {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      overflow: auto;
      background-color: rgba(0,0,0,0.4);
    }
    
    .modal-content {
      background-color: #fefefe;
      margin: 5% auto;
      padding: 20px;
      border: none;
      border-radius: 8px;
      width: 80%;
      max-width: 500px;
      box-shadow: 0 4px 20px rgba(0,0,0,0.3);
    }
    
    .close {
      color: #aaa;
      float: right;
      font-size: 28px;
      font-weight: bold;
      cursor: pointer;
    }
    
    .close:hover,
    .close:focus {
      color: #000;
      text-decoration: none;
    }
    
    /* Drag and drop area */
    .drop-zone {
      border: 3px dashed #007bff;
      border-radius: 10px;
      padding: 40px;
      text-align: center;
      margin: 20px 0;
      background-color: #f8f9fa;
      transition: all 0.3s ease;
      cursor: pointer;
    }
    
    .drop-zone.dragover {
      border-color: #0056b3;
      background-color: #e3f2fd;
      transform: scale(1.02);
    }
    
    .drop-zone-content {
      pointer-events: none;
    }
    
    .drop-zone h4 {
      margin: 0 0 10px 0;
      color: #007bff;
    }
    
    .drop-zone p {
      margin: 5px 0;
      color: #666;
    }
    
    .file-icon {
      font-size: 48px;
      color: #007bff;
      margin-bottom: 15px;
    }
    
    .selected-files {
      margin-top: 20px;
    }
    
    .selected-file-item {
      background: #f8f9fa;
      padding: 10px;
      margin: 5px 0;
      border-radius: 4px;
      border-left: 4px solid #007bff;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .file-details {
      flex-grow: 1;
    }
    
    .file-name {
      font-weight: bold;
      color: #333;
    }
    
    .file-size {
      font-size: 12px;
      color: #666;
    }
    
    .remove-file {
      background: #dc3545;
      color: white;
      border: none;
      padding: 5px 8px;
      border-radius: 3px;
      cursor: pointer;
      font-size: 12px;
    }
    
    .upload-actions {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-top: 20px;
      padding-top: 20px;
      border-top: 1px solid #ddd;
    }
    
    .upload-progress {
      display: none;
      margin-top: 10px;
    }
    
    .progress-bar {
      width: 100%;
      height: 6px;
      background-color: #e9ecef;
      border-radius: 3px;
      overflow: hidden;
    }
    
    .progress-fill {
      height: 100%;
      background-color: #007bff;
      width: 0%;
      transition: width 0.3s ease;
    }
  </style>
</head>
<body>
  <div class="header">
    <div class="user-info">
      <h1> {{ .title }} </h1>
      <p>Welcome, <span id="username">Loading...</span>!</p>
    </div>
    <div>
      <a href="/" class="home-btn">Home</a>
      <button onclick="logout()" class="logout-btn">Logout</button>
    </div>
  </div>

  <div class="dashboard-content">
    <div id="loading" class="loading">
      <p>Loading your files...</p>
    </div>

    <div id="error" class="error" style="display: none;"></div>

    <div id="dashboard-main" style="display: none;">
      <div class="files-section">
        <h3>Your Files</h3>        <div class="file-upload">
          <h4>Upload New File</h4>
          <button onclick="openUploadModal()" class="upload-btn">Upload Files</button>
        </div>

        <div class="files-list" id="filesList">
          <!-- Files will be loaded here -->
        </div>

        <div class="pagination" id="pagination">
          <!-- Pagination will be loaded here -->      </div>
    </div>
  </div>

  <!-- Upload Modal -->
  <div id="uploadModal" class="modal">
    <div class="modal-content">
      <span class="close" onclick="closeUploadModal()">&times;</span>
      <h3>Upload Files</h3>
      
      <div class="drop-zone" id="dropZone" onclick="triggerFileSelect()">
        <div class="drop-zone-content">
          <div class="file-icon">üìÅ</div>
          <h4>Drag & Drop Files Here</h4>
          <p>or</p>
          <p><strong>Click to Choose Files</strong></p>
          <small>Maximum file size: 20MB</small>
        </div>
      </div>
      
      <input type="file" id="fileInput" multiple style="display: none;" />
      
      <div class="selected-files" id="selectedFiles">
        <!-- Selected files will appear here -->
      </div>
      
      <div class="upload-progress" id="uploadProgress">
        <div class="progress-bar">
          <div class="progress-fill" id="progressFill"></div>
        </div>
        <small id="progressText">Uploading...</small>
      </div>
      
      <div class="upload-actions">
        <span id="fileCount">No files selected</span>
        <div>
          <button onclick="clearSelectedFiles()" style="background: #6c757d; color: white; border: none; padding: 8px 16px; border-radius: 4px; margin-right: 10px;">Clear</button>
          <button onclick="uploadSelectedFiles()" id="uploadBtn" style="background: #007bff; color: white; border: none; padding: 8px 16px; border-radius: 4px;" disabled>Upload</button>
        </div>      </div>
    </div>
  </div>
  <script>
    let currentPage = 1;
    const filesPerPage = 10;
    let selectedFiles = [];

    function logout() {
      // 1) Clear the 'jwt' cookie (so /dashboard will require fresh login)
      document.cookie = 'jwt=; path=/; max-age=0; SameSite=Lax';
      // 2) Also remove token from localStorage (for API calls)
      localStorage.removeItem('token');
      window.location.href = '/login';
    }

    // Modal functions
    function openUploadModal() {
      document.getElementById('uploadModal').style.display = 'block';
      setupDragAndDrop();
    }

    function closeUploadModal() {
      document.getElementById('uploadModal').style.display = 'none';
      clearSelectedFiles();
    }

    function triggerFileSelect() {
      document.getElementById('fileInput').click();
    }

    // Drag and drop functionality
    function setupDragAndDrop() {
      const dropZone = document.getElementById('dropZone');
      const fileInput = document.getElementById('fileInput');

      // Handle file input change
      fileInput.addEventListener('change', function(e) {
        handleFiles(e.target.files);
      });

      // Prevent default drag behaviors
      ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        dropZone.addEventListener(eventName, preventDefaults, false);
        document.body.addEventListener(eventName, preventDefaults, false);
      });

      // Highlight drop area when item is dragged over it
      ['dragenter', 'dragover'].forEach(eventName => {
        dropZone.addEventListener(eventName, highlight, false);
      });

      ['dragleave', 'drop'].forEach(eventName => {
        dropZone.addEventListener(eventName, unhighlight, false);
      });

      // Handle dropped files
      dropZone.addEventListener('drop', handleDrop, false);
    }

    function preventDefaults(e) {
      e.preventDefault();
      e.stopPropagation();
    }

    function highlight(e) {
      document.getElementById('dropZone').classList.add('dragover');
    }

    function unhighlight(e) {
      document.getElementById('dropZone').classList.remove('dragover');
    }

    function handleDrop(e) {
      const dt = e.dataTransfer;
      const files = dt.files;
      handleFiles(files);
    }

    function handleFiles(files) {
      [...files].forEach(addFile);
      updateFileDisplay();
    }

    function addFile(file) {
      // Check file size (20MB limit)
      if (file.size > 20 * 1024 * 1024) {
        alert(`File "${file.name}" is too large. Maximum size is 20MB.`);
        return;
      }

      // Check if file already selected
      if (selectedFiles.find(f => f.name === file.name && f.size === file.size)) {
        alert(`File "${file.name}" is already selected.`);
        return;
      }

      selectedFiles.push(file);
    }

    function removeFile(index) {
      selectedFiles.splice(index, 1);
      updateFileDisplay();
    }

    function clearSelectedFiles() {
      selectedFiles = [];
      document.getElementById('fileInput').value = '';
      updateFileDisplay();
    }

    function updateFileDisplay() {
      const selectedFilesContainer = document.getElementById('selectedFiles');
      const fileCount = document.getElementById('fileCount');
      const uploadBtn = document.getElementById('uploadBtn');

      if (selectedFiles.length === 0) {
        selectedFilesContainer.innerHTML = '';
        fileCount.textContent = 'No files selected';
        uploadBtn.disabled = true;
        return;
      }

      fileCount.textContent = `${selectedFiles.length} file(s) selected`;
      uploadBtn.disabled = false;

      let html = '<h5>Selected Files:</h5>';
      selectedFiles.forEach((file, index) => {
        html += `
          <div class="selected-file-item">
            <div class="file-details">
              <div class="file-name">${file.name}</div>
              <div class="file-size">${formatFileSize(file.size)}</div>
            </div>
            <button class="remove-file" onclick="removeFile(${index})">Remove</button>
          </div>
        `;
      });

      selectedFilesContainer.innerHTML = html;
    }

    async function uploadSelectedFiles() {
      if (selectedFiles.length === 0) {
        alert('Please select files first');
        return;
      }

      const token = localStorage.getItem('token');
      if (!token) {
        window.location.href = '/login';
        return;
      }

      const uploadBtn = document.getElementById('uploadBtn');
      const progressContainer = document.getElementById('uploadProgress');
      const progressFill = document.getElementById('progressFill');
      const progressText = document.getElementById('progressText');

      uploadBtn.disabled = true;
      progressContainer.style.display = 'block';

      let successCount = 0;
      let failedCount = 0;

      for (let i = 0; i < selectedFiles.length; i++) {
        const file = selectedFiles[i];
        const formData = new FormData();
        formData.append('file', file);

        try {
          progressText.textContent = `Uploading ${file.name}... (${i + 1}/${selectedFiles.length})`;
          progressFill.style.width = `${((i + 1) / selectedFiles.length) * 100}%`;

          const response = await fetch('/api/file', {
            method: 'POST',
            headers: { 'Authorization': 'Bearer ' + token },
            body: formData
          });
          const data = await response.json();

          if (data.status) {
            successCount++;
          } else {
            failedCount++;
            console.error(`Failed to upload ${file.name}:`, data.error);
          }
        } catch (error) {
          failedCount++;
          console.error(`Network error uploading ${file.name}:`, error);
        }
      }

      progressContainer.style.display = 'none';
      uploadBtn.disabled = false;

      if (failedCount === 0) {
        alert(`All ${successCount} files uploaded successfully!`);
      } else {
        alert(`Upload completed: ${successCount} successful, ${failedCount} failed.`);
      }

      closeUploadModal();
      loadFiles(currentPage);
    }

    async function loadUserInfo() {
      const token = localStorage.getItem('token');
      if (!token) {
        // If no Bearer token, we cannot call /api/user/me ‚Üí force redirect.
        window.location.href = '/login';
        return;
      }

      try {
        // API call needs the Authorization header:
        const response = await fetch('/api/user/me', {
          headers: { 'Authorization': 'Bearer ' + token }
        });
        const data = await response.json();

        if (data.status) {
          document.getElementById('username').textContent = data.data.username;
          loadFiles();
        } else {
          // API returns { status:false } ‚Üí logout & redirect
          logout();
        }
      } catch (error) {
        showError('Failed to load user information');
      }
    }

    async function loadFiles(page = 1) {
      const token = localStorage.getItem('token');
      if (!token) {
        window.location.href = '/login';
        return;
      }

      try {
        const response = await fetch(
          `/api/file?page=${page}&per_page=${filesPerPage}`,
          {
            headers: { 'Authorization': 'Bearer ' + token }
          }
        );
        const data = await response.json();

        if (data.status) {
          displayFiles(data.data);
          displayPagination(data.meta);
          document.getElementById('loading').style.display = 'none';
          document.getElementById('dashboard-main').style.display = 'block';
        } else {
          showError(data.error || 'Failed to load files');
        }
      } catch (error) {
        showError('Network error loading files');
      }
    }    
    
    function displayFiles(files) {
      const filesList = document.getElementById('filesList');

      if (!files || files.length === 0) {
        filesList.innerHTML = '<p>No files uploaded yet.</p>';
        return;
      }

      let html = '';
      files.forEach((file) => {
        const shareStatus = file.shareable ? 
          '<span class="sharing-status status-public">Public</span>' : 
          '<span class="sharing-status status-private">Private</span>';
        
        // Copy link button is always available for the owner
        // Sharing buttons are separate from copy link functionality
        const shareButton = file.shareable ? 
          `<button class="private-btn" onclick="toggleShare('${file.id}', ${file.shareable})">Make Private</button>` :
          `<button class="share-btn" onclick="toggleShare('${file.id}', ${file.shareable})">Make Public</button>`;

        html += `
          <div class="file-item">
            <div class="file-info">
              <strong>${file.filename}</strong><br>
              <small>Size: ${formatFileSize(file.size)} <br>
              Type: ${file.mime_type}</small>
            </div>
            <div class="file-actions">
              <button class="download-btn" onclick="downloadFile('${file.id}')">Download</button>
              <button class="rename-btn" onclick="renameFile('${file.id}')">Rename</button>
              <button class="copy-link-btn" onclick="copyShareLink('${file.id}', ${file.shareable})">Copy Link</button>
              <button class="delete-btn" onclick="deleteFile('${file.id}')">Delete</button>
            </div>
          </div>
        `;
      });
      filesList.innerHTML = html;
    }

    function displayPagination(meta) {
      const pagination = document.getElementById('pagination');
      if (meta.max_page <= 1) {
        pagination.innerHTML = '';
        return;
      }

      let html = '';
      for (let i = 1; i <= meta.max_page; i++) {
        html += `<button onclick="loadFiles(${i})" ${
          i === meta.page ? 'class="active"' : ''
        }>${i}</button>`;
      }
      pagination.innerHTML = html;
    }    async function downloadFile(fileId) {
      const token = localStorage.getItem('token');
      if (!token) {
        window.location.href = '/login';
        return;
      }

      try {
        const response = await fetch(`/api/file/${fileId}`, {
          headers: { 'Authorization': 'Bearer ' + token }
        });
        if (response.ok) {
          const blob = await response.blob();
          const url = window.URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.style.display = 'none';
          a.href = url;
          // Extract filename from Content-Disposition header if present
          const disposition = response.headers.get('Content-Disposition') || '';
          const matches = disposition.match(/filename="?(.+)"?/);
          a.download = matches ? matches[1] : 'download';
          document.body.appendChild(a);
          a.click();
          window.URL.revokeObjectURL(url);
        } else {
          alert('Failed to download file');
        }
      } catch (error) {
        alert('Network error during download');
      }
    }    
    
    async function toggleShare(fileId, currentShareable) {
      const token = localStorage.getItem('token');
      if (!token) {
        window.location.href = '/login';
        return;
      }

      try {
        const response = await fetch(`/api/file/${fileId}`, {
          method: 'PATCH',
          headers: {
            'Authorization': 'Bearer ' + token,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ shareable: !currentShareable })
        });
        const data = await response.json();
        if (data.status) {
          loadFiles(currentPage);
        } else {
          alert('Failed to update sharing: ' + (data.error || 'Unknown error'));
        }
      } catch (error) {
        alert('Network error updating sharing');
      }
    }
    
    function copyShareLink(fileId, isShareable) {
      let shareUrl;
      let linkDescription;
      
      if (isShareable) {
        // Public file - anyone can preview it
        shareUrl = `${window.location.origin}/api/file/${fileId}?view=true`;
        linkDescription = 'Public preview link copied to clipboard! Anyone can view this file.\n\n';
      } else {
        // Private file - only owner can access it (requires authentication)
        shareUrl = `${window.location.origin}/api/file/${fileId}?view=true`;
        linkDescription = 'Private file link copied to clipboard! Only you can access this file.\n\n';
      }
      
      // Copy to clipboard
      if (navigator.clipboard && window.isSecureContext) {
        navigator.clipboard.writeText(shareUrl).then(() => {
          alert(linkDescription + shareUrl);
        }).catch(() => {
          // Fallback
          fallbackCopyToClipboard(shareUrl, linkDescription);
        });
      } else {
        fallbackCopyToClipboard(shareUrl, linkDescription);
      }
    }

    function fallbackCopyToClipboard(text, description) {
      const textArea = document.createElement('textarea');
      textArea.value = text;
      textArea.style.position = 'fixed';
      textArea.style.left = '-999999px';
      textArea.style.top = '-999999px';
      document.body.appendChild(textArea);
      textArea.focus();
      textArea.select();
      
      try {
        document.execCommand('copy');
        alert((description || 'Link copied to clipboard!\n\n') + text);
      } catch (err) {
        // If all else fails, show the link in a prompt
        prompt('Copy this link:', text);
      }
      
      document.body.removeChild(textArea);
    }

    function renameFile(fileId) {
      const newName = prompt('Enter new filename:');
      if (!newName) {
        return; // User cancelled or entered empty name
      }

      const token = localStorage.getItem('token');
      if (!token) {
        window.location.href = '/login';
        return;
      }

      fetch(`/api/file/${fileId}`, {
        method: 'PATCH',
        headers: {
          'Authorization': 'Bearer ' + token,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ filename: newName })
      })
      .then(response => response.json())
      .then(data => {
        if (data.status) {
          loadFiles(currentPage);
          alert('File renamed successfully!');
        } else {
          alert('Failed to rename file: ' + (data.error || 'Unknown error'));
        }
      })
      .catch(error => {
        alert('Network error during renaming');
      });
    }

    async function deleteFile(fileId) {
      if (!confirm('Are you sure you want to delete this file?')) {
        return;
      }

      const token = localStorage.getItem('token');
      if (!token) {
        window.location.href = '/login';
        return;
      }

      try {
        const response = await fetch(`/api/file/${fileId}`, {
          method: 'DELETE',
          headers: { 'Authorization': 'Bearer ' + token }
        });
        const data = await response.json();
        if (data.status) {
          loadFiles(currentPage);
        } else {
          alert('Failed to delete file: ' + (data.error || 'Unknown error'));
        }
      } catch (error) {
        alert('Network error during deletion');
      }
    }

    function formatFileSize(bytes) {
      if (bytes === 0) return '0 Bytes';
      const k = 1024;
      const sizes = ['Bytes', 'KB', 'MB', 'GB'];
      const i = Math.floor(Math.log(bytes) / Math.log(k));
      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    function showError(message) {
      document.getElementById('loading').style.display = 'none';
      const errDiv = document.getElementById('error');
      errDiv.textContent = message;
      errDiv.style.display = 'block';
    }

    // On page load, attempt to fetch "/api/user/me" with Bearer token.
    // If 401 or status:false, logout will clear cookie & redirect.
    window.addEventListener('load', function() {
      loadUserInfo();
    });
  </script>
</body>
</html>
